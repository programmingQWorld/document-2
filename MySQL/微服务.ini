微服务
    服务发现,注册与负载均衡
        Spring Cloud Eureka(工作在传输层)
            Eureka是 SpringCloud 微服务架构中的注册中心，专门负责服务的注册与发现。
            什么是 Eureka？工作原理？
                简单来说，Eureka 就是一个 REST 服务。
                Eureka Server ：提供'服务注册和服务发现'的能力。
                Eureka Client： 提供'负载均衡'（LB）的能力
            Eureka 架构图
                Eureka Server：提供服务注册和发现，多个Eureka Server之间会同步数据，做到状态一致（最终一致性）
                Service Provider：服务提供方，将自身服务注册到Eureka，从而使服务消费方能够找到
                Service Consumer：服务消费方，从Eureka获取注册服务列表，从而能够消费服务
            服务发现原理？
                Eureka server 可以'集群部署'，'多个节点之间'会进行'异步的数据同步'，
                Eureka server 端'通过 appName 和 instanceInfoId 来唯一区分一个 服务实例'，
                服务实例的信息保存'在本地注册表中'，其实就是'保存在一个 Map 中'：
                // '第一层的key是appName'，'第二层的key是instanceInfoId'
                private final ConcurrentHashMap<String, Map<String, Lease<InstanceInfo>>> registry ；
            服务注册原理？
                每个 Service 在启动的时候，都会'通过 HTTP 调用'把自己的服务信息注册到 Eureka Server 端， 
                Eureka Service 接收到注册请求后，会'把服务信息写入到 本地注册表中'，
                然后'同步给其它Eureka Server'，每隔一段时间会进行一次'服务的心跳检测'。
            Eureka 有哪些不足？
                Eureka Client 本身有缓存，'最常见的情况就是服务下线'了，但是'服务消费者未及时感知，此时就会调用失败'。
                对业务有侵入性，需要'每个服务都集成 Eureka Client'

        阿里开源的 nacos
            不了解
        consul
        K8S ('工作在网络层')
                K8s服务发现流程
                    1. Pod 实例发布时，（通过 kind：Delooyment），kubelet 会负责启动 Pod 实例，
                        启动完成后，kubelet 把 Pod IP 列表汇报给 Master 节点
                    2. Service 发布时，（通过kind：Service），K8s 会为 Service 分配 ClusterIP
                    3. 进行服务阶段时，Kube-Proxy 会监听Master 拿到ClusterIP 和 PodIP 列表的映射关系，
                    修改 iptables 转发规则，指示 iptables 在接收到 ClusterIP请求时，进行负载均衡并转发到对应的 Pod 上。
                    4. 进行服务调用时，一般通过 serviceName 先去 Kube-DNS 解析到 ClusterIP，
                    这个ClusetrIP 会被本地的 iptables 截获，通过负载均衡，转发到目标 Pod 上。
                对比 'K8s 服务发现机制'和'目前微服务主流的服务发现机制'？
                    K8s 的服务发现机制明显'抽象更好'，
                    它通过 ClusterIP '统一屏蔽服务发现和负载均衡'，'一个服务一个ClusterIP'。
                    并且'对应用无侵入性'。
    配置中心
        Spring Cloud Config
            配置更改刷新微服务
                重启
                刷新微服务的  /refresh 端点
                Spring Cloud Bus 推送机制
            存储方式
                文件系统
                数据库
                Git
        Apollo
            动态刷新
        K8S配置
            configMap

    微服务调用与负载均衡
        OpenFeign
            **Feign的一个'关键机制'就是'使用了动态代理'。咱们一起'来看看下面的图'，结合图来分析：**

            * 首先，如果你对某个接口定义了@FeignClient注解，Feign就会'针对这个接口创建一个动态代理'

            * 接着你要是调用那个接口，本质就是会调用 Feign创建的动态代理，这是核心中的核心

            * Feign的动态代理会根据你在接口上的@RequestMapping等注解，来动态构造出你要请求的服务的地址

            * 最后针对这个地址，发起请求、解析响应

            ![](http://cdn.processon.com/5c6f6ec3e4b0feef9f33c7ed?e=1550810323&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:8IWygpawzs6-3PCNkSETFRl2gkQ=)

            
        Ribbon
            **Ribbon是和Feign以及Eureka紧密协作，完成工作的，具体如下：**

            * 首先'Ribbon'会从 Eureka Client里'获取到对应的服务注册表'，也就知道了'所有的服务'都部署在了哪些'机器'上，在监听哪些'端口号'。

            * 然后Ribbon就可以使用'默认的Round Robin算法'，从中选择一台机器

            * 'Feign就会针对这台机器，构造并发起请求'。

            ![](http://cdn.processon.com/5c6f6f97e4b03334b52598e8?e=1550810535&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:prornFUNF9LagZ6OGgmmaLk5tcA=)

        限流和熔断
            Hystrix
                '发起请求'是通过'Hystrix的线程池'来走的，不同的服务走不同的线程池，实现了'不同服务调用的隔离'，避免了'服务雪崩'的问题
                ThreadLocal和Hystrix： HystrixConcurrencyStrategy
                    >  用于保护调用的每个Hystrix命令都在一个单独的线程中运行，该线程不与父线程共享它的上下文。
                    * Hystrix 提供了一种机制，可以将父线程的上下文传播到Hystrix管理的线程池中，这种机制被称为 **HystrixConcurrencyStrategy**

                    通过'自定义并发策略'，可以将'父线程的上下文'注入由Hystrix管理的线程中
                    ThreadLocal 与Hytrix 一起'使用需要作额外的操作'
                客户端负载均衡模式（@HystrixCommand）
                Hystrix 进阶 - 微调Hystrix
        









