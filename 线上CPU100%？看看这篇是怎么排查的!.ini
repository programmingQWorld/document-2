线上CPU100%？看看这篇是怎么排查的!


前言
    作为后端开发工程师,当收到'线上服务器CPU负载过高告警时',你会这么做?
    '重启服务,忽略告警?'

    不过在我看来一个'合格的工程师'是一定要'定位到具体问题所在'的,从而'fix它'。
    下面记录一下线上服务器 'CPU负载过高排查过程',把'排查流程'理清楚，'以后遇到问题'将会'迅速定位到问题所在'，'快速解决'。

    什么样的场景'会导致线上CPU负载过高'？

    代码层面常见的场景有：

        1.程序陷入'死循环'，不停地消耗CPU
        2.'线程死锁'，线程'相互等待'，导致'假死状态'，不停地消耗CPU

程序死循环场景

    这里使用 JAVA 简单模拟程序'死循环带来的系统高负载'情况，代码如下：

    /**
     * @program: easywits
     * @description: 并发下的 HashMap 测试....
     * @author: zhangshaolin
     * @create: 2018-12-19 15:27
     **/
     class HashMapMultiThread {
    
        static Map<String, String> map = new HashMap<>();
    
        'public static class' AddThread 'implements Runnable' {
    
            int start = 0;
            public AddThread(int start) {
                this.start = start;
            }
            @Override
            public void 'run()' {
                '// 死循环,模拟CPU占用过高场景'
                while (true) {
                    for (int i = start; i < 100000; i += 4) {
                        map.put(Integer.toString(i), Integer.toBinaryString(i));
                    }
                }
            }

            'public static void main'(String[] args) throws InterruptedException {
                // '线程并发' '对 HashMap 进行 put 操作'  如果一切正常,则得到 map.size() 为100000
    
                //可能的结果:
                //1. 程序正常,结果为100000
                //2. 程序正常,结果小于100000
                Thread thread1 = new Thread(new AddThread(0), "myTask-1");
                Thread thread2 = new Thread(new AddThread(1), "myTask-2");
                Thread thread3 = new Thread(new AddThread(2), "myTask-3");
                Thread thread4 = new Thread(new AddThread(3), "myTask-4");
                thread1.start();
                thread2.start();
                thread3.start();
                thread4.start();
                thread1.join();
                thread2.join();
                thread3.join();
                thread4.join();
                'System.out.println(map.size());'
            }
        }
    }

线程死锁场景
    同样使用 JAVA 程序'简单模拟线程死锁场景'，代码如下：

    /**
    * @program: easywits
    * @description: 死锁 demo ....
    * 1.两个线程里面分别持有两个Object对象：lock1和lock2。这两个lock作为同步代码块的锁；
    * 2.线程1的run()方法中同步代码块先获取lock1的对象锁，Thread.sleep(xxx)，时间不需要太多，50毫秒差不多了，然后接着获取lock2的对象锁。
    * 这么做主要是为了防止线程1启动一下子就连续获得了lock1和lock2两个对象的对象锁
    * 3.线程2的run)(方法中同步代码块先获取lock2的对象锁，接着获取lock1的对象锁，当然这时lock1的对象锁已经被线程1锁持有，线程2肯定是要等待线程1释放lock1的对象锁的
    * <p>
    * 线程1″睡觉”睡完，线程2已经获取了lock2的对象锁了，线程1此时尝试获取lock2的对象锁，便被阻塞，此时一个死锁就形成了。
    * @author: zhangshaolin
    * @create: 2018-12-20 11:33
    **/
    class DeadLock {

        static Object lock1 = new Object();
        static Object lock2 = new Object();

        public static class Task1 implements Runnable {

            @Override
            public void run() {
                synchronized (lock1) {
                    System.out.println(Thread.currentThread().getName() + " 获得了第一把锁!!");

                    try {
                        Thread.sleep(50);  // 留出时间让task2线程提前获取到lock2锁
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }

                    synchronized (lock2) {
                        System.out.println(Thread.currentThread().getName() + " 获得了第二把锁!!");
                    }
                }
            }
        }

        public static class Task2 implements Runnable {

            @Override
            public void run() {
                synchronized (lock2) {
                    System.out.println(Thread.currentThread().getName() + " 获得了第二把锁!!");

                    synchronized (lock1) {
                        System.out.println(Thread.currentThread().getName() + " 获得了第一把锁!!");
                    }
                }
            }
        }

        public static void main(String[] args) throws InterruptedException {
            Thread thread1 = new Thread(new Task1(), "task-1");
            Thread thread2 = new Thread(new Task2(), "task-2");
            thread1.start();
            thread2.start();

            thread1.join();
            thread2.join();
            System.out.println(Thread.currentThread().getName() + " 执行结束!");
        }
    }

    以上两种场景代码执行后，'不出意外，系统CPU负载将会飙升'，我的机器，
    4核CPU已经'明显感觉到卡顿'了，所以'线上应该杜绝出现死循环代码'。。




'使用`top` 命令' '监控当前系统负载情况'
    执行第一种场景测试代码。

    在 linux 命令行键入 top 指令后，就开始实时监控当前系统的负载信息，监控到的负载信息如下图所示：

    lincq:这个是我的

        PID   COMMAND      %CPU TIME     #TH   #WQ  #PORT MEM    PURG   CMPRS PGRP PPID
        362   WindowServer 13.9 02:45:27 26    6    3013- 824M-  8800K+ 128M  362  1
        1503  qemu-system- 10.4 01:50:42 9     0    24    2782M  0B     2280M 1428 1501
        9202  top          7.3  00:00.69 1/1   0    26    6673K  0B     0B    9202 9197
        7219  ScreenSaverE 6.8  38:15.68 13    3    308   163M   6720K  46M   7219 1
        0     kernel_task  5.4  74:38.01 508/9 0    0     12M    0B     0B    0    0
        588   Terminal     2.8  00:24.85 13    8    320+  82M+   9408K+ 12M-  588  1
        6916  SunloginClie 2.4  16:31.98 14    6    303   80M    0B     53M   6916 1
        481   com.apple.Ap 1.6  18:17.46 4     3    171   5025K  0B     1376K 481  1
        1486  Docker Deskt 0.5  05:30.38 10    2    178   107M   0B     26M   1479 1479
        573   Google Chrom 0.4  30:50.77 31    2    1418  228M   32K    38M   573  1
        513   distnoted    0.3  00:55.67 2     1    492   3601K  0B     576K  513  1
        8626  Google Chrom 0.3  00:09.27 15    1    165   96M    0B     32M   573  573
        7041  Google Chrom 0.2  02:10.37 10    1    155   76M    0B     35M   7027 7027
        372   airportd     0.2  03:25.11 10    8    788   14M    0B     2240K 372  1


    从图中的监控信息可以快速大致的了解到，'PID为17499的进程CPU负载高达328+%'，'是一个 JAVA 程序'。简单介绍下监控信息如下：

        PID：进程的ID　　
        USER：进程所有者
        PR：进程的优先级别，越小越优先被执行
        VIRT：进程占用的虚拟内存
        RES：进程占用的物理内存
        SHR：进程使用的共享内存
        S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负
        %CPU：进程占用CPU的使用率
        %MEM：进程使用的物理内存和总内存的百分比
        TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值

    在监控页面下 '按键盘数字 1' 可以'看到每个CPU的负载情况'，如下图：

    可以看到开了四个线程，无限循环之后，我的机器中'四个核心CPU'，'每颗负载接近百分百'。

使用 `top` 命令'监控进程中' '负载过高的线程'
    'top -pid [pid]': '查看指定进程中每个线程的资源占用情况'('每条线程占用CPU时间的百分比')，监控结果如下图：
    https://pic4.zhimg.com/v2-b7d680743270532f1fd393665bc688f7_r.jpg
    以上'监控指令' '输出的指标' '针对的是某个进程中的线程'，从图中看可以快速得出结论：
    '四个 JAVA 线程CPU负载极高'，'线程ID'分别为:'17532,17535,17533,17534',注意这里打印出来的'线程ID为十进制'的哦！

'根据' '进程pid 和 线程id' '查看线程堆栈信息'

    > 'jstack pid'
        
        查看指定进程中线程的堆栈信息，这个命令最终会'打印出指定进程的线程堆栈信息'，
        而实际'线上情况发生时'，我们应当把'快速把堆栈信息输出到日志文本中'，'保留日志信息'，然后'迅速先重启服务'，达到'临时缓解服务器压力'的目的。

    > 'jstack 17499 > ./threadDump.log'

        将'线程堆栈信息' '输出到' 当前目录下的 'threadDump.log 文件'。 
        注意：'jstack 打印出的线程id号为十六进制'，而 'top 命令'中'打印出来的线程号'为'十进制'，
        '需要进行转换'后，'才能定位指定线程的堆栈信息'

    这里分析日志文件后，过滤出四个线程堆栈信息如下图：
        https://pic4.zhimg.com/v2-5f4e843d9bacc5dcee3d69942ff59b2f_r.jpg

        ### top命令获取到线程高负载的线程号，转化为十六进制，定位

        "myTask-4" '#'12 prio=5 os_prio=0 tid=0x00007fca38887000 'nid=0x447e 'runnable [Ox00007fcalcefc000]
            java. lang.Thread.state: RUNNABLE
            at java.util. 'Hashmap. put' (HashMap- java:612)
            at com. easywits. common.ut il.concurrent. HashMapMultiThreadsAddThread. run(HashMapMultiThread. java:29)
            at java. lang. Thread. run(Thread. java:748)

        "myTask-3" '#'12 prio=5 os_prio=0 tid=0x00007fca38887000 'nid=0x447e 'runnable [Ox00007fcalcefc000]
            java. lang.Thread.state: RUNNABLE
            at java.util. Hashmap. put (HashMap- java:612)
            at com. easywits. common.ut il.concurrent. HashMapMultiThreadsAddThread. run(HashMapMultiThread. java:29)
            at java. lang. Thread. run(Thread. java:748)

        "myTask-2" '#'12 prio=5 os_prio=0 tid=0x00007fca38887000 'nid=0x447e 'runnable [Ox00007fcalcefc000]
            java. lang.Thread.state: RUNNABLE
            at java.util. Hashmap. put (HashMap- java:612)
            at com. easywits. common.ut il.concurrent. HashMapMultiThreadsAddThread. run(HashMapMultiThread. java:29)
            at java. lang. Thread. run(Thread. java:748)

        "myTask-1" '#'12 prio=5 os_prio=0 tid=0x00007fca38887000 'nid=0x447e 'runnable [Ox00007fcalcefc000]
            java. lang.Thread.state: RUNNABLE
            at java.util. Hashmap. put (HashMap- java:612)
            at com. easywits. common.ut il.concurrent. HashMapMultiThreadsAddThread. run(HashMapMultiThread. java:29)
            at java. lang. Thread. run(Thread. java:748)

    从这四个线程执行的堆栈信息，很显的看出明：'导致CPU飙升的程序正在执行 HashMap 的 put 操作'。

友情提示：'测试代码' 最好'不要在公司的线上环境做测试哦'！